syntax = "proto3";
package main;

import "google/protobuf/empty.proto";

// state machine:
//
// req Handshake -> resp Accepted -> req TrancodeURL
//
// req Transcode -> resp JobStateResp -> req Status
//
// req Status -> resp JobStateResp -> req Status
//
// req Status -> resp JobStateResp -> req Cancel
//
// req Status -> resp JobStateResp.Complete -> req TranscodeURL
//
// req Cancel -> resp Cancelled -> req TranscodeURL
//
// req _ -> resp Invalid
message TranscodeReq {
  oneof req {
    Handshake handshake = 1;
    Transcode transcode = 2;
    google.protobuf.Empty status = 3;
    google.protobuf.Empty cancel = 4;
  }

  message Transcode {
    string url = 1;
  }

  message Handshake {
    Token token = 1;
  }
}

message TranscodeResp {
  oneof resp {
    // generic error from encoding or the server; assume that the stream is over.
    string error = 1;
    // accepted is returned after a handshake. if it is not ok, the handshake failed.
    Result accepted = 2;
    // job_status is returned from calling status or transcode_url.
    JobStatus job_status = 3;
  }

  message JobStatus {
    oneof state {
      google.protobuf.Empty unknown = 1;
      google.protobuf.Empty no_jobs = 2;
      google.protobuf.Empty queued = 3;
      google.protobuf.Empty processing = 4;
      google.protobuf.Empty uploading = 5;
      Result completed = 6;
      google.protobuf.Empty cancelled = 7;
    }
  }
}

message Result {
  oneof result_inner {
    string ok = 1;
    string err = 2;
  }
}

message Token {
  oneof token {
    // V1 is a shared random secret known by the end user.
    // It's presented as base64 and decoded into bytes before transmission as a Token.
    bytes v1 = 1;
  }
}
